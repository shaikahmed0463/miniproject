# -*- coding: utf-8 -*-
"""mini project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YbCcHqP7TAyU_P7yFZ7nVgADlr_v1DjZ
"""

import random
import math
lower = int(input("Enter Lower bound:- "))
upper = int(input("Enter Upper bound:- "))
x = random.randint(lower, upper)
print("\n\t You've only ",
       round(math.log(upper - lower + 1, 2)),
      " chances to guess the integer!\n")
c = 0
while c < math.log(upper - lower + 1, 2):
    c += 1
    y = int(input("Guess a number:- "))
    if x == y:
        print("Congratulations you did it in ",
              c, " try")
        break
    elif x > y:
        print("You guessed too small!")
    elif x < y:
        print("You Guessed too high!")
if c >= math.log(upper - lower + 1, 2):
    print("\nThe number is %d" % x)
    print("\tBetter Luck Next time!")

import random

user_input = input("Enter a choice (rock, paper, scissors): ")
possible_inputs = ["rock", "paper", "scissors"]
computer_input = random.choice(possible_inputs)
print(f"\nYou chose {user_input}, computer chose {computer_input}.\n")

if user_input == computer_input:
    print(f"Both players selected {user_input}. It's a tie!")
elif user_input == "rock":
    if computer_input == "scissors":
        print("Rock smashes scissors! You win!")
    else:
        print("Paper covers rock! You lose.")
elif user_input == "paper":
    if computer_input == "rock":
        print("Paper covers rock! You win!")
    else:
        print("Scissors cuts paper! You lose.")
elif user_input == "scissors":
    if computer_input == "paper":
        print("Scissors cuts paper! You win!")
    else:
        print("Rock smashes scissors! You lose.")

class Node:
  def __init__(self,data):
    self.data = data
    self.next = None

class Sll:
  def __init__(self):
    self.head = None
  
  # Insertion
  def insert_at_beg(self,data):
    nb = Node(data)
    nb.next = self.head
    self.head = nb

  def insert_at_end(self,data):
    ne = Node(data)
    temp = self.head
    while temp.next:
      temp = temp.next
    temp.next = ne
 
#  Count
  def getCount(self):
        temp = self.head 
        count = 0  
        while (temp):
            count += 1
            temp = temp.next
        return count
  
  # reverse 
  def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev
        
# Middle_Value 
  def printMiddle(self):
        temp = self.head
        count = 0 
        while self.head:
            if (count & 1):
                temp = temp.next
            self.head = self.head.next
            count += 1        
        print(temp.data)   
         
   
#  Display
  def display(self):
    if self.head is None:
      print('Singly LL is empty')
    else:
      temp = self.head
      while temp :
        print(temp.data,end=" ")
        temp = temp.next

l = Sll()
l.insert_at_beg(3)
l.insert_at_beg(2)
l.insert_at_beg(1)
l.insert_at_beg(5)
l.insert_at_end(20)
l.insert_at_end(30)
l.getCount()
l.reverse()
l.display()
print("\nCount of nodes is :", l.getCount())
l.reverse()
print ("\nReversed Linked List")
l.display()
print ("\nMiddle value is: ")
l.printMiddle()